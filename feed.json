{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "description": "",
    "home_page_url": "https://smilium-leafat.github.io",
    "items": [
        {
            "id": "https://smilium-leafat.github.io/2022/11/19/%E4%BB%B7%E6%A0%BC%E6%AD%A7%E8%A7%86-2022-11-19/",
            "url": "https://smilium-leafat.github.io/2022/11/19/%E4%BB%B7%E6%A0%BC%E6%AD%A7%E8%A7%86-2022-11-19/",
            "title": "价格歧视_2022-11-19",
            "date_published": "2022-11-18T16:48:55.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTgzJUI5JUU2JUEwJUJDJUU1JTg4JTg2JUU2JUFEJUE3\">zh.wikipedia.org/wiki/ 價格分歧</span></p>\n<h4 id=\"定义\"><a class=\"markdownIt-Anchor\" href=\"#定义\">#</a> 定义</h4>\n<p>生产者将<b>生产成本相同</b>的产品以<b>不同的价格</b>卖给不同的买家.</p>\n<h4 id=\"适用条件\"><a class=\"markdownIt-Anchor\" href=\"#适用条件\">#</a> 适用条件</h4>\n<ol>\n<li>\n<p>卖家<b>垄断</b>市场，同时<b>可以控制价格</b>;</p>\n</li>\n<li>\n<p>卖家能够了解消费者购买商品的愿望和能力 (即：知道各自的需求弹性)</p>\n</li>\n</ol>\n<h4 id=\"三个等级\"><a class=\"markdownIt-Anchor\" href=\"#三个等级\">#</a> 三个等级</h4>\n<ul>\n<li>\n<p>一级价格歧视</p>\n<p>即 “完全价格歧视”.</p>\n</li>\n<li>\n<p>二级价格歧视</p>\n</li>\n<li>\n<p>三级价格歧视</p>\n</li>\n</ul>\n",
            "tags": [
                "学业 经济学"
            ]
        },
        {
            "id": "https://smilium-leafat.github.io/2022/11/18/ArchLinux%E9%85%8D%E7%BD%AEfcitx5%E5%B0%8F%E7%8B%BC%E6%AF%AB%E8%BE%93%E5%85%A5%E6%B3%95-22-11-18-1100/",
            "url": "https://smilium-leafat.github.io/2022/11/18/ArchLinux%E9%85%8D%E7%BD%AEfcitx5%E5%B0%8F%E7%8B%BC%E6%AF%AB%E8%BE%93%E5%85%A5%E6%B3%95-22-11-18-1100/",
            "title": "ArchLinux配置fcitx5小狼毫输入法_22-11-18-1100",
            "date_published": "2022-11-18T03:01:01.000Z",
            "content_html": "<h1 id=\"part-0-序\"><a class=\"markdownIt-Anchor\" href=\"#part-0-序\">#</a> Part 0. 序</h1>\n<p>本文将介绍如何在 Arch Linux 上以 fcitx5 为输入法框架配置 Rime 小狼毫输入法，以及词库的安装。所有内容结合了笔者实操过程的经 (踩) 验 (坑) 总 (经) 结 (历), 同时基于 Arch Wiki 与 Rime 官网教程.</p>\n<ul>\n<li>目标: fcitx5 输入法框架、Rime 小狼毫输入法、中文维基词库、萌娘百科词库</li>\n</ul>\n<h1 id=\"part-1-安装fcitx5输入法框架\"><a class=\"markdownIt-Anchor\" href=\"#part-1-安装fcitx5输入法框架\">#</a> Part 1. 安装 fcitx5 输入法框架</h1>\n<p><b>注意: fcitx5 框架与 fcitx 框架不相兼容，安装前请确保已经完全删除 fcitx 框架相关的所有包和依赖！</b></p>\n<p>截至本文发布，Arch Linux 官方源的 fcitx5 框架本体已被包含在 fcitx5-im 包组中，且后者还提供了配置工具和必要的输入法模块，因此只需要安装 fcitx5-im 即可，安装命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S fcitx5-im</span><br></pre></td></tr></table></figure>\n<p>由于 fcitx5 仅提供基本框架，且仅支持英文。如果要输入其他语言（例如中文或日文）, 则需要安装输入法引擎（IME）.</p>\n<h1 id=\"part-2-安装rime输入法引擎\"><a class=\"markdownIt-Anchor\" href=\"#part-2-安装rime输入法引擎\">#</a> Part 2. 安装 Rime 输入法引擎</h1>\n<p>输入法引擎笔者选用 Rime, 虽然配置起来比较复杂，但胜在高度的自定义。下面将介绍如何安装 Rime 输入法以及朙月拼音、Emoji 表情符号两种输入方案.</p>\n<p>fcitx5 框架下的 rime 安装命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S fcitx5-rime</span><br></pre></td></tr></table></figure>\n<p>此时虽然安装了 rime, 但还需要输入方案才能工作，安装输入方案的命令如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 安装朙月拼音（简体）输入方案</span></span><br><span class=\"line\">pacman -S rime-luna-pinyin</span><br><span class=\"line\"><span class=\"comment\"># 安装emoji表情输入方案</span></span><br><span class=\"line\">pacman -S rime-emoji</span><br></pre></td></tr></table></figure>\n<h1 id=\"part-3-配置rime\"><a class=\"markdownIt-Anchor\" href=\"#part-3-配置rime\">#</a> Part 3. 配置 Rime</h1>\n<p>配置 Rime 有两种方法，一是直接修改对应输入法的配置文件（例如修改朙月拼音的配置文件 <code>luna_pinyin.yaml</code> ）, 然后选择 &quot;重新部署&quot; 应用更改；另一种方法是在用户文件夹下创建输入法的副本，并在副本的输入法名与 <code>.yaml</code>  之间添加 <code>.custom</code> （例如将朙月拼音的配置文件副本 <code>luna_pinyin.yaml</code>  改为 <code>luna_pinyin.custom.yaml</code> ）, 然后修改副本，最后应用更改.<br>\n 两种方法效果一致，但使用的一种方法修改的配置在每次更新 Rime 后都会被覆盖掉，而第二种方法则不会，因此推荐使用第二种方法修改.</p>\n<p>按照第二种方法，首先创建文件夹存放配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> ~/.local/share/fcitx5/rime</span><br></pre></td></tr></table></figure>\n<p>然后在这个文件夹中创建 <code>default.custom.yaml</code>  文件，指定可选输入法</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\">  <span class=\"attr\">schema_list:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">schema:</span> <span class=\"string\">luna_pinyin</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">schema:</span> <span class=\"string\">emoji</span></span><br></pre></td></tr></table></figure>\n<p>配置完毕后进行部署，可以在输入法托盘选择 &quot;重新部署&quot;, 或者在终端输入以下命令重新部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">rm</span> ~/.local/share/fcitx5/rime/default.yaml</span><br><span class=\"line\">fcitx5-remote -r</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Arch 输入法"
            ]
        },
        {
            "id": "https://smilium-leafat.github.io/2022/11/05/Windows-for-Git%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/",
            "url": "https://smilium-leafat.github.io/2022/11/05/Windows-for-Git%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/",
            "title": "Windows for Git安装与配置",
            "date_published": "2022-11-05T13:03:52.000Z",
            "content_html": "<h1 id=\"参考内容\"><a class=\"markdownIt-Anchor\" href=\"#参考内容\">#</a> 参考内容</h1>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L211a2VzL2FydGljbGUvZGV0YWlscy8xMTU2OTM4MzM=\">Git 详细安装教程（详解 Git 安装过程的每一个步骤）</span></li>\n</ul>\n",
            "tags": [
                "git"
            ]
        },
        {
            "id": "https://smilium-leafat.github.io/2022/10/25/Python%E9%85%8D%E7%BD%AEpip%E7%BC%93%E5%AD%98%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BD%8D%E7%BD%AE-22-10-25-1054/",
            "url": "https://smilium-leafat.github.io/2022/10/25/Python%E9%85%8D%E7%BD%AEpip%E7%BC%93%E5%AD%98%E5%8F%8A%E6%A8%A1%E5%9D%97%E4%BD%8D%E7%BD%AE-22-10-25-1054/",
            "title": "Windows配置pip缓存及python模块安装位置_22-10-25-1054",
            "date_published": "2022-10-25T02:54:52.000Z",
            "content_html": "<blockquote>\n<p>本文遵守<br>\n参考来源见末尾 &quot;参考来源&quot; 处.</p>\n</blockquote>\n<h2 id=\"修改pip缓存位置\"><a class=\"markdownIt-Anchor\" href=\"#修改pip缓存位置\">#</a> 修改 pip 缓存位置</h2>\n<ul>\n<li>创建新存放 pip 文件夹</li>\n</ul>\n<p>例如，Python 安装路径为 <code>D:\\Software\\Python\\Python</code>  中，可在 <code>D:\\Software\\Python</code>  下新建文件夹 pipcache 作为新的 pip 缓存位置.</p>\n<ul>\n<li>设置缓存位置</li>\n</ul>\n<p>在命令行中使用以下命令重新指定 pip 缓存位置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip config set global.cache-dir &quot;D:\\Software\\Python\\pip\\pipcache&quot;</span><br></pre></td></tr></table></figure>\n<p>若出现 <code>Writing to C:\\Users\\user_name\\AppData\\Roaming\\pip\\pip.ini</code>  即为成功.</p>\n<ul>\n<li>删除旧 pip 缓存</li>\n</ul>\n<p>在资源管理器中输入 <code>%LocalAppData%</code>  并回车，在跳转到的目录下找到并删除 pip 文件夹.</p>\n<ul>\n<li>修改 pip 配置文件</li>\n</ul>\n<p>在资源管理器中输入 <code>%AppData%</code>  并回车，在跳转到的 Roaming 文件夹下使用代码编辑器 (不要用 Windows 自带的记事本，容易出现奇怪的问题) 修改或新建 pip.ini 文件，修改 / 添加以下内容 (一定要在 [global] 下方) 后保存:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">cache-dir = D:\\Software\\Python\\pip\\pipcache</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改python模块安装位置\"><a class=\"markdownIt-Anchor\" href=\"#修改python模块安装位置\">#</a> 修改 python 模块安装位置</h2>\n<ul>\n<li>查看模块当前的路径配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m site --help</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改路径</li>\n</ul>\n<p>在自己选定的目录下按格式 (如下文) 创建文件夹，使用代码编辑器打开 site.py 文件，找到以下内容并修改目录指向创建的文件夹:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER_SITE = <span class=\"string\">r&quot;D:\\\\Software\\Python\\PythonDir\\\\venv\\lib\\\\site-packages&quot;</span></span><br><span class=\"line\">USER_BASE = <span class=\"string\">r&quot;D:\\\\Software\\Python\\PythonDir&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>检验结果</li>\n</ul>\n<p>输入以下命令查看结果:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m site</span><br></pre></td></tr></table></figure>\n<p>显示结果含有类似以下内容，同时其中路径正确且末尾有 &quot;exists&quot; 即修改成功:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">USER_BASE: `D:\\\\Software\\\\Python\\\\PythonDir` (exists)</span><br><span class=\"line\">USER_SITE: `D:\\\\Software\\\\Python\\\\PythonDir\\\\venv\\\\lib\\\\site-packages` (exists)</span><br><span class=\"line\">ENABLE_USER_SITE: True</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考来源\"><a class=\"markdownIt-Anchor\" href=\"#参考来源\">#</a> 参考来源</h1>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVob3NvL3AvMTU1NTAwOTEuaHRtbA==\">【博客园】李好秀 BY-NC-SA 修改 Windows 中 pip 的缓存位置与删除 pip 缓存</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGhhbm9zLXJ5YW4vcC8xMzM3OTkwOS5odG1s\">【博客园】Hello_Thanos python 安装模块及模块安装路径配置</span></p>\n</li>\n</ul>\n",
            "tags": [
                "Windows, Python"
            ]
        },
        {
            "id": "https://smilium-leafat.github.io/2022/10/14/Termux-Windows%E9%80%9A%E8%BF%87SSH%E4%BA%A4%E4%BA%92-22-10-14-1856/",
            "url": "https://smilium-leafat.github.io/2022/10/14/Termux-Windows%E9%80%9A%E8%BF%87SSH%E4%BA%A4%E4%BA%92-22-10-14-1856/",
            "title": "Termux Windows 通过 SSH 交互",
            "date_published": "2022-10-14T10:56:26.000Z",
            "content_html": "<h2 id=\"part-0-序\"><a class=\"markdownIt-Anchor\" href=\"#part-0-序\">#</a> Part 0. 序</h2>\n<p>本文始于作者的某些需要接触了 Termux 与 SSH, 在身为小白的摸索当中整理总结出来的一些内容，自身水平有限，行文比较琐碎，如需要请酌情参考.</p>\n<p>仅此做个记录，方便路过翻看的人也方便自己后来查阅。本文中笔者主要想使用 SSH 实现手机与 Windows 互访，需要一台搭载 Windows 系统的机器以及一部安装了 Termux App 的安卓手机 / 平板.</p>\n<h4 id=\"食用注意\"><a class=\"markdownIt-Anchor\" href=\"#食用注意\">#</a> 食用注意</h4>\n<ul>\n<li>\n<p>文章结合了互联网与个人实践，部分参考自个人博客、部分国内外论坛及官方文档，所用参考文献均位于文末 &quot;参考文章&quot; 处，请自行查阅.</p>\n</li>\n<li>\n<p>由于本文主讲 Windows 平台，故如无特别说明，本文在 Windows 平台上的命令操作都在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL3dpbmRvd3Mtc2VydmVyL2FkbWluaXN0cmF0aW9uL3dpbmRvd3MtY29tbWFuZHMvcG93ZXJzaGVsbA==\"> Windows PowerShell</span> 完成.</p>\n</li>\n<li>\n<p>文章将尽可能完整地介绍使用 SSH 实现 &quot;手机 / 平板 - PC&quot; 互仿，但前期将主要讨论如何从手机端访问 PC 端，PC 端访问手机端将作为补充内容穿插其中以免内容过于冗杂，行文琐碎，如有不便请见谅.</p>\n</li>\n<li>\n<p>本文将着重介绍 SSH 的安装使用，至于 Trtmux 的安装与使用详见<a href=\"\">这里</a>.</p>\n</li>\n</ul>\n<h2 id=\"part-1-ssh与ssh协议\"><a class=\"markdownIt-Anchor\" href=\"#part-1-ssh与ssh协议\">#</a> Part 1. SSH 与 SSH 协议</h2>\n<p>首先，我们来了解一下 SSH 以及 SSH 协议。先看下官方怎么说:</p>\n<blockquote>\n<p><b><a href=\"https://www.ssh.com/academy/ssh\"> <code>SSH(Secure Shell)</code> </a></b> 指的是一个软件包，支持在不安全的网络上进行安全的系统管理和文件传输。几乎每个数据中心和每个大型企业都使用它。</p>\n</blockquote>\n<blockquote>\n<p>SSH 协议使用加密来保护客户端和服务器之间的连接。所有用户身份验证、命令、输出和文件传输都进行了加密，以防止网络中的攻击。</p>\n</blockquote>\n<p>也就是说 (粗略理解), SSH 是一整套加密通讯服务与手段，包括 SSH 加密算法、传输方式、客户端与服务端等。大致过程为：我们先在自己的设备 (称为客户端 Client) 和想要访问的设备 (称为服务端 Server) 上各自部署好 SSH 服务，设定好加密密钥然后就能进行通讯，通讯的内容经 SSH 协议加密后在公共网络中传输，借此实现在不安全的网络环境中通讯.</p>\n<p>了解完概念，接下来我们将从零开始尝试在服务端和客户端之间搭建 OpenSSH 服务并使用它.</p>\n<h1 id=\"part-2-服务端的准备\"><a class=\"markdownIt-Anchor\" href=\"#part-2-服务端的准备\">#</a> Part 2. 服务端的准备</h1>\n<p>OpenSSH 的操作建议在 PowerShell 上完成，并且最好以<b>管理员</b>身份运行，因为 Powershell 支持一部分 Linux 指令，功能更强大.</p>\n<ol>\n<li>安装 OpenSSH 服务</li>\n</ol>\n<p>OpenSSH 服务包括两部分：服务端和客户端，如果你只想将 Windows 作为 SSH 服务端，只需要安装 OpenSSH 服务器即可，反之只选择安装 OpenSSH 客户端。当然也可以一同安装，实现互相访问. Microsoft 官方给出的 Windows 下安装 OpenSSH 服务有三种方法，任选一种即可.</p>\n<ul>\n<li>通过内置模块方式安装</li>\n</ul>\n<p>最简单的方法，不能保证安装的服务版本使最新的，但开箱即用.</p>\n<p>在 &quot;设置 &gt; 应用和功能 &gt; 可选功能 &gt; 添加功能&quot; 中搜索 “OpenSSH 服务器”(若作为客户端则选择 &quot;OpenSSH 客户端&quot;), 勾选前面的框框，然后点击下方的 &quot;安装&quot;, 等待自动下载即可.</p>\n<ul>\n<li>通过 GitHub 安装</li>\n</ul>\n<p>使用此方法可以获取最新的 SSH 版本。项目地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1Bvd2VyU2hlbGwvT3BlblNTSC1Qb3J0YWJsZQ==\">PowerShell/OpenSSH-Portable</span></p>\n<p>注意：通过 GitHub 安装 OpenSSH 可能不适用参考本文章！</p>\n<ul>\n<li>通过 PowerShell 安装</li>\n</ul>\n<p>官方教程地址: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL3dpbmRvd3Mtc2VydmVyL2FkbWluaXN0cmF0aW9uL29wZW5zc2gvb3BlbnNzaF9pbnN0YWxsX2ZpcnN0dXNlP3NvdXJjZT1yZWNvbW1lbmRhdGlvbnM=\">Microsoft: 通过 PowerShell 安装 OpenSSH</span></p>\n<ol start=\"2\">\n<li>获取服务端地址与端口号</li>\n</ol>\n<p>一般来讲，我们使用 SSH 进行访问时需要知道服务端的 ip 地址还有端口号 (例如 GitHub 的 ip 地址是  <code>140.82.112.4</code> ).</p>\n<p>Windows 上查询当前 ip 地址可以在 Powershell 输入 <code>ipconfig</code> , 并在输出结果中找到以下内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Wireless LAN adapter WLAN:</span><br><span class=\"line\"></span><br><span class=\"line\">   Connection-specific DNS Suffix  . :</span><br><span class=\"line\">   IPv6 Address. . . . . . . . . . . : xxx:xxx:xxx:xxx:xxx:xxx:xxx:xxx</span><br><span class=\"line\">   Temporary IPv6 Address. . . . . . : xxx:xxx:xxx:xxx:xxx:xxx:xxx:xxx</span><br><span class=\"line\">   Temporary IPv6 Address. . . . . . : xxx:xxx:xxx:xxx:xxx:xxx:xxx:xxx</span><br><span class=\"line\">   Temporary IPv6 Address. . . . . . : xxx:xxx:xxx:xxx:xxx:xxx:xxx:xxx</span><br><span class=\"line\">   Link-local IPv6 Address . . . . . : xxx::xxx:xxx:xxx:xxx</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : xx.xx.xx.xx</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : xx.xx.xx.xx</span><br><span class=\"line\">   IPv4 Address. . . . . . . . . . . : xx.xx.xx.xx</span><br><span class=\"line\">   Subnet Mask . . . . . . . . . . . : xx.xx.xx.xx</span><br><span class=\"line\">   Default Gateway . . . . . . . . . : xx.xx.xx.xx</span><br></pre></td></tr></table></figure>\n<p>其中的  <code>IPv4 Address</code>  后的四组数就是本机当前的 ip 地址.</p>\n<h2 id=\"对于dhcp分配的ip地址\"><a class=\"markdownIt-Anchor\" href=\"#对于dhcp分配的ip地址\">#</a> 对于 DHCP 分配的 ip 地址</h2>\n<p>由于服务端开启 DHCP 会导致 ip 地址发生变化，使得我们难以连接到服务端，因此在条件允许的情况下为服务端关闭 DHCP.</p>\n<p>如果条件不允许 (例如校园网), 可以尝试使用静态 ip. 具体方法为:</p>\n<p>在任务栏的 &quot;网络&quot; 处右键，选择 &quot;打开’网络和 Internet’设置&quot;, 选择当前连接到的网络，找到 &quot;ip 设置&quot;, 选择 &quot;编辑&quot;, 将 &quot;自动 (DHCP)“改为&quot; 手动”, 然后打开 &quot;ipv4&quot;, ip 地址填入上文获取到的 ip 地址，填写 &quot;子网前缀长度&quot;、“网关”、“首选 DNS&quot;和&quot; 备用 DNS”, 最后点击保存，等待重新连接网络即可.</p>\n<ul>\n<li>关于子网前缀长度与网关的关系可以上网搜索，或者从手机处获取.</li>\n</ul>\n<ol start=\"3\">\n<li>查看客户端用户名称</li>\n</ol>\n<p>在 PowerShell 中查看当前用户名可以输入以下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n<p>返回的格式为 &quot;你的 PC 名 \\ 当前登录的用户名&quot;</p>\n<h1 id=\"part-3-客户端的准备\"><a class=\"markdownIt-Anchor\" href=\"#part-3-客户端的准备\">#</a> Part 3. 客户端的准备</h1>\n<ol>\n<li>安装 OpenSSH 服务</li>\n</ol>\n<p>Termux 安装 OpenSSH 只需要一条命令即可:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pkg install openssh</span><br><span class=\"line\"><span class=\"comment\"># 或者使用下面的简写命令, 两者都是安装 OpenSSH 的命令</span></span><br><span class=\"line\">pkg i openssh</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，Termux 模拟的系统不同于一般的 Linux, 它的<font color=#D73C4E><b>SSH 服务端与客户端安装是一起的</b></font>, 运行上述命令会一同安装好服务端与客户端，而真正的 Linux 系统两者是分开安装的.</p>\n<ol start=\"2\">\n<li>查看本机 ip 地址</li>\n</ol>\n<p>在 Termux 终端运行以下命令 (请注意第二个字母是 <code>f</code>  不是 <code>p</code> !):</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ifconfig</span><br></pre></td></tr></table></figure>\n<p>在输出结果中找到以下部分 (通常在最后):</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wlan0: flags=xxxx&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu xxxx</span><br><span class=\"line\">        inet xxx.xxx.xxx.xxx  netmask xxx.xxx.xxx.xxx  broadcast xxx.xxx.xxx.xxx</span><br><span class=\"line\">        inet6 xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx  prefixlen xxx  scopeid 0x0&lt;global&gt;</span><br><span class=\"line\">        inet6 xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx  prefixlen xxx  scopeid 0x0&lt;global&gt;</span><br><span class=\"line\">        inet6 xxxx::xxxx:xxxx:xxxx:xxxx  prefixlen xxx  scopeid 0x20&lt;link&gt;</span><br><span class=\"line\">        unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00  txqueuelen 1000  (UNSPEC)</span><br><span class=\"line\">        RX packets xxxxxx  bytes xxxxx (xxx MiB)</span><br><span class=\"line\">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class=\"line\">        TX packets xxxxxx  bytes xxxxx (xxxx MiB)</span><br><span class=\"line\">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>\n<p>其中 inet 后的四组数就是本机的 ip 地址.</p>\n<ol start=\"3\">\n<li>查看用户名</li>\n</ol>\n<p>与 PowerShell 一样，查看用户名只需要输入以下命令:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">whoami</span><br></pre></td></tr></table></figure>\n<p>返回格式一般类似 &quot;xx_xxx&quot; 这样带下划线的名称，每个用户返回的名称都不一样. <b>记住这个用户名，后面要用到.</b></p>\n<h1 id=\"part-3-使用用户名与密码连接\"><a class=\"markdownIt-Anchor\" href=\"#part-3-使用用户名与密码连接\">#</a> Part 3. 使用用户名与密码连接</h1>\n<p>知道了两者的 ip 地址，我们还需要两者开放的端口才能进行通讯。一般情况下，SSH 的数据传输端口默认都是 22, 而手机出于安全考虑，对上数值比较小的端口管的比较严，因此手机上的 SSH 开放的是 8022 端口. <em>端口号可以在配置文件里自行更改，这里直接使用默认的端口号.</em></p>\n<p>获取了服务端的与客户端的信息后 (ip 地址，端口，用户名), 我们就能够开始尝试连接了:</p>\n<ul>\n<li>从 Termux 访问 Windows</li>\n</ul>\n<p>首先，<b>以管理员身份</b>在 Windows 的 PowerShell 中输入以下命令启动 ssh 服务:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注意此时Windows是作为服务端, 服务名称应该是sshd而不是ssh</span></span><br><span class=\"line\">net start sshd</span><br></pre></td></tr></table></figure>\n<p>然后在 Termux 输入以下命令即</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh WinUser@win_ip</span><br></pre></td></tr></table></figure>\n<ul>\n<li>从 Windows 访问 Termux</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh TermuxUser@termux_ip -p 8022</span><br></pre></td></tr></table></figure>\n<p>连接服务端时，需要提供用户名和密码。用户名可以在 Powershell 输入  <code>whoami</code>  获取，返回的结果为  <code>计算机名\\当前用户名</code> ，如果当前用户使用 Microsoft 账户登录，则密码为当前用户 Microsoft 账号的密码；如果当前用户使用本地管理员账户 (域账户), 则密码对应本地管理员账户的登录密码.</p>\n<h1 id=\"part-4-使用免密登录\"><a class=\"markdownIt-Anchor\" href=\"#part-4-使用免密登录\">#</a> Part 4. 使用免密登录</h1>\n<p>完成前面的操作之后我们会发现：每一次传输文件都需要输入密码，很是麻烦， 而且可能有人还是对通讯过程的安全性有顾虑。那么，有没有什么办法能做到既不用密码登录又能保证通讯过程安全呢？答案是：有的。所以接下来将介绍如何免密使用 SSH 登录与访问.</p>\n<h2 id=\"windows免密登录termux\"><a class=\"markdownIt-Anchor\" href=\"#windows免密登录termux\">#</a> Windows 免密登录 Termux</h2>\n<p>Windows 使用</p>\n<h2 id=\"termux免密登录windows\"><a class=\"markdownIt-Anchor\" href=\"#termux免密登录windows\">#</a> Termux 免密登录 Windows</h2>\n<p>Tremux 免密登录 Windows 比较特别，由于 SSH 本身对免密登录的账户及文件夹权限限制比较多，所以需要为特定的文件和文件夹设置权限.<br>\n 然而网络上大多数教程针对的是 Linux 文件夹权限的修改，我最后所找到的解决办法在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL3dpbmRvd3Mtc2VydmVyL2FkbWluaXN0cmF0aW9uL29wZW5zc2gvb3BlbnNzaF9rZXltYW5hZ2VtZW50\"> Windows 官方文档</span>里 (微软的文档真的给力).</p>\n<p>此处按登录的用户在 Windows 中的分组有几种情况：用户为管理员身份 (在 Administrators 组中)、用户为标准用户身份 (不在 Administrators 组中).</p>\n<h3 id=\"a-登录用户为标准用户\"><a class=\"markdownIt-Anchor\" href=\"#a-登录用户为标准用户\">#</a> a. 登录用户为标准用户</h3>\n<ol>\n<li>确保 Windows 上有名为 ssh 的文件夹，同时用户有权访问该文件夹及子文件夹.</li>\n</ol>\n<p>Windows 安装 SSH 服务后，一般会在 <code>C:\\ProgramData</code>  下创建一个叫 ssh 的文件夹，存放的是作为 ssh 服务器时的配置。当使用 Windows 作为 ssh 客户端时，一般会在 <code>C:\\Users\\用户名</code> 下生成一个叫.ssh 的文件夹，用来存放作为 ssh 客户端的配置；如果找不到.ssh 文件夹则需要自己在这个目录下创建一个.</p>\n<p>如果没有.ssh 文件夹可以通过以下命令远程创建:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">这里填的是要登陆服务器的用户名与服务器地址</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中的username为用户名, domain1@contoso.com为服务端的ip地址或域名</span></span><br><span class=\"line\">ssh username@domain1@contoso.com mkdir C:\\Users\\username\\.ssh\\</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将本地生成的<p>公钥</p>发送到 Windows 服务器</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">将本地生成的公钥发送到服务端的authorized_key中</span></span><br><span class=\"line\">scp ~\\.ssh\\id_ed25519.pub user1@domain1@contoso.com:C:\\Users\\username\\.ssh\\authorized_keys</span><br></pre></td></tr></table></figure>\n<h3 id=\"b-登录用户为管理员\"><a class=\"markdownIt-Anchor\" href=\"#b-登录用户为管理员\">#</a> b. 登录用户为管理员</h3>\n<ol>\n<li>首先要确保 Windows 上有名为 ssh 的文件夹，如果没有可以通过以下命令远程创建:</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">即: 要登录Win的用户名@服务器ip地址</span></span><br><span class=\"line\">ssh user1@domain1@contoso.com mkdir C:\\ProgramData\\ssh\\</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>将本地生成的<p>公钥<p>(带.pub 后缀那个) 发送到 Windows 服务器.</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp C:\\Users\\username\\.ssh\\id_ed25519.pub user1@domain1@contoso.com:C:\\ProgramData\\ssh\\administrators_authorized_keys</span><br></pre></td></tr></table></figure>\n<p><font color=#76FFCD><b>请注意，此时是将公钥存放到 <code>C:\\ProgramData\\ssh</code>  文件夹而不是用户文件夹，而且要将公钥文件 (含后缀) 改名为 <code>administrators_authorized_keys</code> .</b></font></p>\n<ol start=\"3\">\n<li>配置 ACL</li>\n</ol>\n<p>在客户端命令如下:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh --% WinUser@domain1@contoso.com icacls.exe &quot;C:\\ProgramData\\ssh\\administrators_authorized_keys&quot; /inheritance:r /grant &quot;Administrators:F&quot; /grant &quot;SYSTEM:F&quot;</span><br></pre></td></tr></table></figure>\n<p>在服务端则直接输入以下命令 (在服务端是全局命令，不需要考虑命令执行的位置):</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">icacls.exe &quot;C:\\ProgramData\\ssh\\administrators_authorized_keys&quot; /inheritance:r /grant &quot;Administrators:F&quot; /grant &quot;SYSTEM:F&quot;</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>重启服务端</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net stop sshd</span><br><span class=\"line\">net start sshd</span><br></pre></td></tr></table></figure>\n<h1 id=\"part-5-管理多个服务器客户端用户\"><a class=\"markdownIt-Anchor\" href=\"#part-5-管理多个服务器客户端用户\">#</a> Part 5. 管理多个服务器 / 客户端用户</h1>\n<p>当我们通过生成密钥对的方式实现免密登录后，如果要登录的主机比较多，我们就需要记住很多组用户名与 ip 地址，这时候我们就想有一个方法，将每个要访问的服务器 / 客户端的信息贴上一个标签，然后通过输入标签来访问服务器，这就是 config 文件在做的事. config 文件中按规范记录了每个服务器 / 客户端的 ip 地址、用户名、访问端口与密码等，并为每个对象贴上一个可以自定义的标签，我们只需要配置好标签的信息就能直接通过标签进行 SSH 访问，非常方便，下面介绍方法.</p>\n<p>config 文件书写格式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github</span><br><span class=\"line\">   HostName 140.82.112.4</span><br><span class=\"line\">   User git</span><br><span class=\"line\">   Port 22</span><br><span class=\"line\">   IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n<p>或者不使用缩进，其格式如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github</span><br><span class=\"line\">HostName 140.82.112.4</span><br><span class=\"line\">User git</span><br></pre></td></tr></table></figure>\n<p>需要注意的是 config 文件需要自己创建。同时配置文件是放在<b><font color=#76FFCD>.ssh 文件夹下</font></b>, 注意不要搞错了.<br>\n 而皮质文件可用的具体选项及说明可以一查看官方文档 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3NoLmNvbS9hY2FkZW15L3NzaC9jb25maWc=\">https://www.ssh.com/academy/ssh/config</span></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host Termux</span><br><span class=\"line\">   HostName 140.233.43.123</span><br><span class=\"line\">   Port 8022</span><br><span class=\"line\">   User u0_a312</span><br><span class=\"line\">   IdentityFile ~/.ssh/id_rsa_MyTermux</span><br><span class=\"line\">   passwordAuthentication no</span><br></pre></td></tr></table></figure>\n<p>IdentityFile 是指定连接时校验的密钥；passwordAuthentication 是密码认证，如果使用密钥登录（免密登录）则关闭它避免每次连接都要输入密码.</p>\n<h2 id=\"windows配置\"><a class=\"markdownIt-Anchor\" href=\"#windows配置\">#</a> Windows 配置</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host termux(别名, 随便起)</span><br><span class=\"line\">   HostName Termux的ip</span><br><span class=\"line\">   User 登录Termux的用户名</span><br><span class=\"line\">   IdentityFile ~/.ssh/私钥a</span><br><span class=\"line\">   passwordAuthentication no</span><br></pre></td></tr></table></figure>\n<h2 id=\"termux配置\"><a class=\"markdownIt-Anchor\" href=\"#termux配置\">#</a> Termux 配置</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HostName win10(别名, 方便自己记)</span><br><span class=\"line\">   HostName windows的ip</span><br><span class=\"line\">   User 登录Windows的用户名</span><br><span class=\"line\">   IdentityFile ~/.ssh/私钥b</span><br><span class=\"line\">   passwordAuthentication no</span><br></pre></td></tr></table></figure>\n<h2 id=\"连接和使用\"><a class=\"markdownIt-Anchor\" href=\"#连接和使用\">#</a> 连接和使用</h2>\n<p>在完成了上述配置后，双方开启 sshd 服务就能使用了.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Windows连接Termux</span></span><br><span class=\"line\">ssh Termux</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Termux连接Windows</span></span><br><span class=\"line\">ssh win10</span><br></pre></td></tr></table></figure>\n<h1 id=\"参考文章\"><a class=\"markdownIt-Anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<ul>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3Fsc2VjLmNvbS8yMDE4LzA1L3Rlcm11eC5odG1s\">【国光的个人博客】Trtmux 高级终端安装配置使用教程</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NjI0Njg1L2FydGljbGUvZGV0YWlscy8xMjI2MzEwODM=\">【CSDN（转载）】windows 无法使用 ssh-copy-id 解决办法</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8wNmYzYjJkMWViZGM=\">【简书（原文）】Windows 下设置 SSH 免密</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdXBlcnVzZXIuY29tL3F1ZXN0aW9ucy8xNTIyNDY2L29wZW5zc2gtbm90LWFjY2VwdGluZy1teS1sb2dpbi1wYXNzd29yZA==\">【superuser】OpenSSH not accepting my login password</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL3poLWNuL3dpbmRvd3Mtc2VydmVyL2FkbWluaXN0cmF0aW9uL29wZW5zc2gvb3BlbnNzaF9rZXltYW5hZ2VtZW50\">【Microsoft】OpenSSH 密钥管理</span></p>\n</li>\n</ul>\n",
            "tags": [
                "ssh, termux, windows"
            ]
        },
        {
            "id": "https://smilium-leafat.github.io/2022/10/14/Hexo%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C_22-10-14-0006/",
            "url": "https://smilium-leafat.github.io/2022/10/14/Hexo%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C_22-10-14-0006/",
            "title": "Hexo命令手册",
            "date_published": "2022-10-13T16:07:06.000Z",
            "content_html": "<h1 id=\"简述\"><a class=\"markdownIt-Anchor\" href=\"#简述\">#</a> 简述</h1>\n<p>Hexo 命令格式以  <code>hexo</code>  开头，后接命令 (Commands) 或全局选项 (Global Options), 可以使用缩写.<br>\n 命令 / 选项的书写格式如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo [Command/Global Option] [arguments]</span><br></pre></td></tr></table></figure>\n<p>其中  <code>[Command/Global Option]</code>  为命令或全局选项，[arguments] 为参数，是否为可选项视具体情况而定.<br>\n 对于命令 (Commands), 前面不需要加任何修饰，直接在 hexo 后即可；<br>\n 对于全局选项 (Global Option), 选项前面需要以  <code>--</code> , 开头.</p>\n<h1 id=\"命令简介\"><a class=\"markdownIt-Anchor\" href=\"#命令简介\">#</a> 命令简介</h1>\n<ul>\n<li>help<br>\n 帮助命令。在其后指定其他命令以获取该命令的帮助信息.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 获取 command_name 命令的使用方法</span></span><br><span class=\"line\">hexo <span class=\"built_in\">help</span> command_name</span><br></pre></td></tr></table></figure>\n<ul>\n<li>new<br>\n 创建新的博客文章。参数必填，是新文章的文件名 (不是网页显示的文章标题), 但 Hexo 默认会将文件名作为博客文章的标题.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new <span class=\"string\">&quot;ArticleFileName&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 简写</span></span><br><span class=\"line\">hexo n <span class=\"string\">&quot;ArticleFileName&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>server<br>\n 启动 Hexo 服务.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br><span class=\"line\"><span class=\"comment\"># 简写</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>可用选项:</p>\n<ul>\n<li><code>-i</code> ,  <code>--ip</code>  覆盖默认服务器 ip</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://smilium-leafat.github.io/2022/10/13/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_22-10-13-2349/",
            "url": "https://smilium-leafat.github.io/2022/10/13/%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2_22-10-13-2349/",
            "title": "Windows使用Hexo搭建github博客",
            "date_published": "2022-10-13T15:50:37.000Z",
            "content_html": "<h1 id=\"0-序\"><a class=\"markdownIt-Anchor\" href=\"#0-序\">#</a> 0. 序</h1>\n<p>本文整理了博主使用 Hexo 框架在 Windows 平台搭建博客的过程，同时收集了部分搭建过程可能出现的错误。其中各步骤可能出现的报错内容及相应解决办法均被集中列在文章最后一节，在可能会报错的操作后会以 &quot;&quot;作为标记。点击标记即可跳转至文章最后一节相应位置，这一节部分后续或许会更新。文章参考的内容可在最后&quot; 参考内容 &quot; 部分查看.</p>\n<h1 id=\"1-工具安装及环境部署\"><a class=\"markdownIt-Anchor\" href=\"#1-工具安装及环境部署\">#</a> 1. 工具安装及环境部署</h1>\n<p>本文中，搭建博客需要的工具包括: Node.js、Git、Chocolatey (Node.js 安装附带)、npm (Node.js 安装附带)、Python (Node.js 安装附带) 与 cnpm (代替 npm 加快下载).</p>\n<h2 id=\"安装部署-git-环境\"><a class=\"markdownIt-Anchor\" href=\"#安装部署-git-环境\">#</a> 安装部署 Git 环境</h2>\n<ol>\n<li>\n<p>从 Git 官网<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRmb3J3aW5kb3dzLm9yZy8=\">下载 Git-for-Windows</span></p>\n</li>\n<li>\n<p>配置 Git 环境 (配置方法详见 &quot;Windows for Git 安装与配置&quot;)</p>\n</li>\n</ol>\n<h2 id=\"安装nodejs及相关工具\"><a class=\"markdownIt-Anchor\" href=\"#安装nodejs及相关工具\">#</a> 安装 Node.js 及相关工具</h2>\n<h3 id=\"1-下载nodejs\"><a class=\"markdownIt-Anchor\" href=\"#1-下载nodejs\">#</a> 1. 下载 Node.js</h3>\n<ul>\n<li>\n<p>从 Node.js 官网<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">下载 Node.js</span> 的<strong> LTS 版本</strong>.</p>\n</li>\n<li>\n<p>或选择<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">下载其他版本</span>.</p>\n</li>\n</ul>\n<h3 id=\"2-安装nodejs\"><a class=\"markdownIt-Anchor\" href=\"#2-安装nodejs\">#</a> 2. 安装 Node.js</h3>\n<p>双击打开下载的 msi 安装文件，选择安装路径，然后在 &quot;Tools for Native Modules&quot; 页面勾选 &quot;Atuomatically install the necessary tools.&quot; 选项，安装完成后会弹出 CMD 窗口并自动安装所需要的工具 (Chocolatey、Python 与 Vitural Studio 2019 工具).<br>\n 其中，由于是国外网站，Python 的安装速度较慢，</p>\n<p>检验是否安装完成:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看Node.js版本</span></span><br><span class=\"line\">node -v</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查看npm版本</span></span><br><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>利用 npm 安装 cnpm 加快国内安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检验cnpm安装是否成功</span></span><br><span class=\"line\">cnpm -v</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>安装 Hexo</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">检验是否安装完成</span></span><br><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n<h2 id=\"开始\"><a class=\"markdownIt-Anchor\" href=\"#开始\">#</a> 开始</h2>\n<p>新建一个文件夹来存放博客文件，直接删除博客文件夹即可删除整个博客.</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在命令行中</span></span><br><span class=\"line\">mkdir 博客文件夹名称</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在PowerShell中</span></span><br><span class=\"line\">New-Item -Path X:/xxx/xxx/ -Name 博客文件夹名称 -ItemType directory </span><br></pre></td></tr></table></figure>\n<h1 id=\"step-3-本地预览\"><a class=\"markdownIt-Anchor\" href=\"#step-3-本地预览\">#</a> Step 3. 本地预览</h1>\n<p>一般来说，一篇博客在部署到网站之前都需要经过多次预览与修改，这意味着我们要在本地上多次预览博客并根据根据预览情况进行调整，而 Hexo 正好提供了此功能，要在本地预览博客，只需要在终端输入如下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动博客, s时命令server的简写</span></span><br><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n<p>此时如果弹出 Windows 安全中心警报选择<strong>允许访问</strong>即可.</p>\n<h1 id=\"step-4-云端同步\"><a class=\"markdownIt-Anchor\" href=\"#step-4-云端同步\">#</a> Step 4. 云端同步</h1>\n<p>当我们在本地的博客 / 网站调整得差不多后，就要考虑将</p>\n<h1 id=\"报错处理\"><a class=\"markdownIt-Anchor\" href=\"#报错处理\">#</a> 报错处理</h1>\n<ul>\n<li>Error: error_name</li>\n</ul>\n<!-- picture[]() -->\n<ul>\n<li>\n<p>Reason &amp; Solution<br>\nOne of Reasons is xxx. The solution is to xxx.</p>\n</li>\n<li>\n<p>报错内容:</p>\n</li>\n</ul>\n<font color=red>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python not installed. An error occurred during installation:  </span><br><span class=\"line\"> 操作超时</span><br></pre></td></tr></table></figure>\n</font>\n`python package files upgrade failed with exit code 1. Performing other installation steps.`  \n<font color=red>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The upgrade of python was NOT successful.</span><br><span class=\"line\">python not installed. An error occurred during installation:  </span><br><span class=\"line\"> 操作超时</span><br></pre></td></tr></table></figure>\n</font>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://smilium-leafat.github.io/2022/07/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/",
            "url": "https://smilium-leafat.github.io/2022/07/29/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/",
            "title": "我的第一篇博客文章",
            "date_published": "2022-07-29T04:44:16.000Z",
            "content_html": "<h2 id=\"第一章\"><a href=\"#第一章\" class=\"headerlink\" title=\"第一章\"></a>第一章</h2><h2 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h2><h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2>",
            "tags": []
        },
        {
            "id": "https://smilium-leafat.github.io/2022/07/29/hello-world/",
            "url": "https://smilium-leafat.github.io/2022/07/29/hello-world/",
            "title": "Hello World",
            "date_published": "2022-07-29T04:38:23.744Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}